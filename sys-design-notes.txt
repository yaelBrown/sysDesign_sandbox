7 steps
  Requirements clarifications
  back-of-the-envelope (bote) estimation
  system interface def
  defining data model
  high-level design
  detailed design
  identifiying and resolving bottlenecks

  Req clarifications (example questions for twitter system)
    Will users of our service be able to post tweets and follow other people?
    Should we also design to create and display the user’s timeline?
    Will tweets contain photos and videos?
    Are we focusing on the backend only, or are we developing the front-end too?
    Will users be able to search tweets?
    Do we need to display hot trending topics?
    Will there be any push notification for new (or important) tweets?

    Functional and Non-functional requirements
      Function reqs - Reqs that end user demands, basic facilities the system should offer
        "What should the software system do?"
      non-funct reqs - quality constraits that the system must satisfy according to project contract
        "How should the software system fulfill the functional requirements?"

  Bote q's
    What scale is expected from the system (e.g., number of new tweets, number of tweet views, number of timeline generations per sec., etc.)?
    How much storage will we need? We will have different storage requirements if users can have photos and videos in their tweets.
    What network bandwidth usage are we expecting? This will be crucial in deciding how we will manage traffic and balance load between servers.

  sys interface def
    What api's are expected

  Define data model
    Make the models for the data (uml diagram)
    Which database to use, mysql or nosql

    User: UserID, Name, Email, DoB, CreationDate, LastLogin, etc.
    Tweet: TweetID, Content, TweetLocation, NumberOfLikes, TimeStamp, etc.
    UserFollow: UserID1, UserID2
    FavoriteTweets: UserID, TweetID, TimeStamp

  High level design
    Draw a block diagram

    KGS - Key Generation Service - a standalone service (that the design proposed) to generates random six letter strings beforehand and store these keys in a database.
      Good for saving time and ensuring unique keys are used

      Concurrency can cause problem - if keys are requested at the same time

  Detailed design
    dig deeper into two or three major components
    Since we will be storing a massive amount of data, how should we partition our data to distribute it to multiple databases? Should we try to store all the data of a user on the same database? What issue could it cause?
    How will we handle hot users who tweet a lot or follow lots of people?
    Since users’ timeline will contain the most recent (and relevant) tweets, should we try to store our data so that it is optimized for scanning the latest tweets?
    How much and at which layer should we introduce cache to speed things up?
    What components need better load balancing?

  identifiying and resolving bottlenecks  
    Is there any single point of failure in our system? What are we doing to mitigate it?
    Do we have enough replicas of the data so that we can still serve our users if we lose a few servers?
    Similarly, do we have enough copies of different services running such that a few failures will not cause a total system shutdown?
    How are we monitoring the performance of our service? Do we get alerts whenever critical components fail or their performance degrades?

range based partitioning
https://www.educative.io/courses/grokking-the-system-design-interview/m2ygV4E81AR